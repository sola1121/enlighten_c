测试条件
    只要测试条件的值为非零, expression就被定为真, 将执行循环.
    这是从数值方面而不是从真,假方面看测试条件.
    测试通常涉及关系表达式, 逻辑表达式


--------------------------------------------------------------

入口条件循环 entry condition
    满足条件才能进入循环体, 即在执行多次循环之前已决定是否执行循环

    while ( expression )
        statement
    
    while语句创建了一个循环, 重复执行直到测试表达式为假或者说0值. 

        expression
            是值之间的比较, 可以使用任何表达式, 为真值 或 假值 
            expression为真(更一般地说, 非零), 执行statement部分一次, 然后在次判断expression. 在expression为假(0)之前, 循环的判断和执行一直重复进行.
            每次循环都被称为一次迭代(iteration)

        statement
            部分可以是以分号结尾的简单语句, 也可以使用花括号括起来的复合语句


    for( initialize; test; update)
        statement

    for语句使用3个表达式控制循环过程, 分别用分号隔开.
    initialize表达式在执行for循环之前执行一次
    然后对test表达式求值, 如果表达式为真(或非零), 执行statement一次
    接着对update表达式求值, 并再次检查test表达式

    优势, 可以在一行进行
        初始化计数器
        计数器与有限的值做比较
        每次循环时计数器变值

    可以省略一个或多个表达式(但是不能省略分号)
    如:
        for (count=2; count<=6;)

    第1个表达式不一定是给变量赋初值, 也可以使用如printf()等函数. 
    注意 
        在执行循环的其他部分之前, 只对第1个表达式求值一次或执行一次.
    for (printf("开始循环.");;)

    循环体中的行为可以改变循环头中的表达式, 也就是说循环体和循环头使用同一作用域

    在for循环中使用逗号做分隔符, 可以在循环头中包含更多的表达式.
    如:
        for (count1=0, count2=0; count1<=10 && count2<=10; count1++, count2++);
        逗号运算符从左往右求值, 换言之, 逗号是一个序列点, 所以逗号左侧项的所有副作用都在程序执行逗号右侧之前发生


--------------------------------------------------------------

出口条件循环 exit-condition loop
    在循环的每次迭代之后检查测试条件, 这保证了至少执行循环体中的内容一次

    do
        statement
    while ( expression );

    do...while 语句创建一个循环
    在expression为假或0值之前, 重复执行循环体中的内容
    statement可以使一条简单语句或复合语句

--------------------------------------------------------------


常见错误

循环是一个强大的工具, 需要注意
    循环的测试条件要能使循环结束
    循环测试中的值在首次使用之前已经初始化
    循环在每次迭代都更新测试的值

1.
    while ( count++ <10) ;   // 使用分号, 循环执行一个空语句
        printf(" %d", array[count]);
    
2. 
    do
        printf(" %d", array[count]);
    while ( count++ <10)   // 这里得有分号

3.
    while ( status=6 ){   // 将赋值= 与 等于==运算符混淆, status将会被赋值为5, 在进入判断, 为非零, while将会一直循环, 变为无限循环
        do something ...
    }
    可以通过将常量与变量改变顺序的方式避免该错误
    如
        6 = status;
    C语言不允许向常量赋值, 所以该语句编译时会造成语法错误

4.
    for (; ;);
    while (1);
    do {} while(1);
    以上都是死循环, 要注意没有表达式使循环满足以上条件

    x = 1;
    do {
        y = x--;
        if (!y) {
            printf("*");
            continue;
        }
        printf("#");
    } while(1<=x<=2);
    以上程序, x永远小于等于1, 第一次执行循环体, x=0, 进行判断时, 1<=x值为0, 再0<=2值为1
    这样之后的循环就无法终止, 所以死循环
    