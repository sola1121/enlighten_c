数据的存储基础
    比特Bit, 亦称二进制位, 指二进制中的一位, 只能存储开与关, 即1与0, 是信息的最小单位. Bit是Binary digit(二进制数位)的混成词. 可缩写为b
    字节Byte, 通常用作计算机信息计量单位, 不分数据类型. 是通信和数据存储的概念. 一个字节代表八个比特bit. 可缩写为B
    1B = 8b


计算机的数制
    用数字符号排列成数位, 按由低位到高位的进位方式来表示数的方法叫作计数制, 也称数制.
    常见的有二进制, 八进制, 十进制, 十二进制, 十六进制
    无论使用何种进制, 都包含两个基本要素: 基数, 位权
    
    如果数制只采用R个基本符号, 则称为基R数制.
    R称为数制的基数, 而数制中每一个固定位置对应的单位值称为权, 各位的权是以R为底的幂.
    一个数可按权展开成多项式之和.


二进制数对于计算机
    健全的人有10个手指, 在历史中, 发展出了以十进制计数的习惯, 即以10为基底的计数方法
    如 十进制数 2157, 以十进制的方式拆开, 可以写成
        2×10³ + 1×10² + 5×10¹ + 7×10⁰
    
    对比以冯·诺依曼等人理论设计的计算机, 相当于只有2个手指, 因为电路只能表示开或关, 通常以1与0表示, 因此计算机是以2为基底的计数方法
    如 二进制数 1101, 以二进制的方式拆开, 可以写成
        1×2³ + 1×2² + 0×2¹ + 1×2⁰


二进制 binary
    二进制数基数为2, 进位规则是逢二进一, 借位规则是借一当二, 使用0和1表示数


二进制整数
    通常一个字节包含8位. C语言用字节Byte表示存储系统字符所需的大小, 所以C字节可能是8位, 9位, 16位或其他值.
    不过描述存储器芯片和数据传输率中所用的字节指的是8位字节. 计算机研究人员常用用八位组octet特指8位字节.

    回到1字节, 可以从左往右给这8位分别编号7~0.
    在1字节中, 编号7的位称为高阶位high-order bit, 编号0的位称为低阶位low-order bit.
             ❼❻❺❹❸❷❶⓿
    对应二进制 2⁷ 2⁶ 2⁵ 2⁴ 2³ 2² 2¹ 2⁰位

    对于1字节, 能表示最大的数字是把所有位都设置为1, 即 11111111 , 表示为 1×2⁷ + 1×2⁶ + 1×2⁵ + 1×2⁴ + 1×2³ + 1×2² + 1×2¹ + 1×2⁰, 对应的十进制为255
    能表示最小的数字是把所有位都设置为0, 即 00000000, 值为0
    因此1字节可存储0~255范围内的数字, 总共256个值. 或者可以通过不同的方式解释位组合bit pattern, 程序可以用1字节存储 -128 ~ +127范围内的整数, 总共256个值
    例如, 通常unsigned char 用1字节表示的范围是0~255, 而signed char用1字节表示的范围是 -128~+127


有符号整数
    如何表示有符号整数取决于硬件, 而不是C语言.
    
    符号量 sign-magnitude 表示有符号整数
        表示有符号数最简单的方式是用1位(如高阶位)存储符号, 若存储在一字节中便只剩下7位表示数字本身.
        用这种符号量表示法, 10000001表示-1, 00000001表示1, 因此表示范围是 -127~+127
        这种方法的缺点有两个, 两个零值+0和-0. 这很容易混淆, 而且用两个位组合来表示一个值也有些浪费.

    二进制补码 tow's complement
        二进制补码避免了正负0与资源浪费问题, 也是当今最常用的系统.
        在一字节中, 二进制补码用一字节中的后7位表示0~127, 高阶位设置为0. 用高阶位表示正负, 如果高阶位是1, 表示的值为负. 
        目前, 这种方法和符号量的方法相同. 符号量与二进制补码这两种方法的区别在于如何确定负值.
        从一个9位组合100000000(对应十进制256)减去一个负数的位组合, 结果是该赋值的量.
        例如, 一个负值的位组合是100000000
            作为一个无符号字节, 该组合表示128
            当作为一个有符号值, 该组合表示负值(编码是7的位为1), 而且值为100000000-10000000, 即10000000(对应十进制128).
            因此该数是-128(在符号量表示法中, 该位组合表示-0).
        类似地, 10000001是-127, 11111111是-1.
        该方法可以表示-128~+127范围内的数

        如何获得一个二进制补码
            正数的补码就是其本身
            负数的补码是在其原码的基础上, 符号位不变, 其余各位取反, 最后+1, 进位不改变符号位. (即在反码的基础上+1)

            因为1是00000001, 那么-1则是11111110+1, 或11111111.
    
    二进制反码 one's-complement
        正数的反码是其本身
        负数的反码是在其原码的基础上, 符号位不变，其余各个位取反.

        例如00000001是1, 那么11111110是-1. 这种方法也有一个-0: 11111111. 该方法能表示-127~+127之间的数


二进制浮点数
    浮点数分两部分存储, 二进制小数, 二进制指数

    二进制小数
        对于十进制的小数0.527, 表示为
            5÷10¹ + 2÷10² + 7÷10³
        
        对于二进制的小数.101, 表示为
            1÷2¹ + 0÷2² + 1÷2³
        对应的十进制表示法为
            0.5 + 0.00 + 0.125, 即十进制小数0.625

        许多分数, 如1/3, 不能用十进制表示法精确地表示. 与此类似, 许多分数也不能用二进制法精确地表示.
        实际上, 二进制表示法只能精确地表示多个½的幂的和. 因此, 2/4和7/8可以精确地表示为二进制小数, 但是1/3和2/5却不能
    
    浮点数表示法
        为了在计算机中表示一个浮点数, 要留出若干位(因系统而异)存储二进制分数, 其他位存储指数.
        一般而言, 数字的实际值是由二进制小数乘以2的指定次幂组成.
        例如, 一个浮点数乘以4, 那么二进制小数不变, 其他指数乘以2, 二进制分数不变.
        如果一份浮点数乘以一个不是2的幂的数, 会改变二进制小数部分, 如果有必要, 也会改变指数部分.


八进制 octal
    八进制是指八进制记数系统. 计数基数为8. 低位数和高一位数之间的关系是逢八进一. 
    用0~7表示数字.
    例如, 八进制数 451, 在C中写作0451, 表示为
        4×8² + 5×8¹ + 1×8⁰, 对应十进制为297
    
    每个八进制位对应3个二进制位.
    Bin 000 001 010 011 100 101 110 111
    Oct 0   1   2   3   4   5   6   7

    可以利用这样的关系方便的让八进制与二进制互相转换

    例如, 八进制数0377的二进制形式是11111111.
         即用111代替0377中最后一个7, 接着用111代替0377中倒数第二个7, 最后用011代替3, 并舍去第一位0.
         0377正好是一个字节能表示的最大八进制数, 如果要表示更大的数, 就要用多个字节表示.
        
    注意, 将八进制数转换为二进制形式时, 不能去掉中间的0
    例如, 八进制数0173, 最后一个3用011代替, 倒数第二个7用111替换, 1用001替换, 二进制形式为01111011


十六进制 hex或hexadecimal
    十六进制是指十六进制记数系统. 计数基数是16. 低位数和高一位数之间的关系是逢十六进一.
    用0~9表示0~9的数, A~F表示10~15的数, 在C中A~F大小写均可.
    例如, 十六进制数A3F, 在C中写作0xA3F, 也可写作0xa3f, 表示为
        10×16² + 3×16¹ + 15×16⁰, 对应十进制为2623

    每个十六进制位对应4个二进制位. 两个十六进制位恰好对应一个8位字节.
    Bin 0000 0001 0010 0011 0100 0101 0110 0111 1000 1001 1010 1100 1101 1110 1111
    Hex 0    1    2    3    4    5    6    7    8    9    a    b    c    d    f

    可以利用这样的关系方便的让十六进制与二进制相互转换

    例如, 十六进制数0xC2, 2转换为0010, C转换为11011, 对应的二进制为11000010
         二进制数01001111, 可以看作0100与1111两位十六进制数, 对应的十六进制为0x4F


不同进制之间的转换
    将二进制, 八进制, 十六进制数转换成十进制数的法则是按权展开的多项式之和.
    1. R进制转换为十进制
        二进制数100110.101转换为十进制数
            (100100.101)₂ = 1×2⁵ + 0 + 0 + 1×2² + 1×2¹ + 0 + 0 + 1×2⁻¹ + 1×2⁻³ = 32 + 4 + 2 + 0.5 + 0.125 = (38.625)₁₀
        
        八进制数103.2转换为十进制数
            (103.2)₈ = 1×8² + 0 + 3×8⁰ + 2×8⁻¹ = 64 + 3 + 0.25 = (67.25)₁₀
        
        十六进制数10CF转换为十进制数
            (10CF)₁₆ = 1×16³ + 0 + 12×16¹ + 15×16⁰ = 4096 + 192 + 15 = (4303)₁₀

    2. 十进制转换为R进制
        1) 十进制转换为二进制
            十进制数转换为二进制数时, 整数部分与小数部分换算的方法不同, 需分别计算.
            (1) 整数部分转换 - 除以2取余数法
                将需要转换的整数除以2, 所得余数作为二进制的最低位数, 将商的整数部分再除以2, 所得余数为次低位数, 如此反复
                十进制数18转换为二进制数
                    18 ÷ 2 = 9 ⋯ 0
                     9 ÷ 2 = 4 ⋯ 1
                     4 ÷ 2 = 2 ⋯ 0
                     2 ÷ 2 = 1 ⋯ 0
                     1 ÷ 2 = 0 ⋯ 1
                按最高位到最低为排列, 结果为10010
                即(18)₁₀ = (10010)₂
                注意: 最后被除去的才是高位的数, 是被除留下来的
            (2) 小数部分转换 - 乘2取整法
                将需要转换的小数乘以2, 所得积的整数部分作为二进制小数的最高位数, 将积的小数部分继续乘以2, 直到积的小数部分是0为止
                十进制数0.8125转换成二进制数
                    0.1825 × 2 = 1.625 , 整数 1
                    0.625 × 2 = 1.25, 整数 1
                    0.25 × 2 = 0.5, 整数 0
                    0.5 × 2 = 1.0, 整数 1
                按最高位到最低为排列, 结果为1101
                即(0.8125)₁₀ = (0.1101)₂
                注意: 最后被乘以的才是低位的数, 是被成留下来的
            合并(18.8125)₁₀ = (10010.1101)₂

            注意:
                并不是所有的十进制小数都能转换成有限位的二进制小数, 有时整个过程会无线进行下去.
                此时需要根据计算精度要求来确定二进制小数的近似值.
        2) 十进制转换为八进制
            整数部分采用"除以8取余法", 小数部分采用"乘8取整法"
        3) 十进制转换为十六进制
            整数部分采用"除以16取余法", 小数部分采用"乘16取整法"

    3. 非十进制数之间的转换
        两个非十进制数之间的转换一般可采用两种方法
            方法1, 现将被转换数转换成相应的十进制数, 然后再将十进制数转换成其他进制数.
            方法2, 利用二进制数, 八进制数和十六进制之间的特殊关系进行转化

原码, 反码和补码
    在计算机的CPU内部, 用于运算的核心部件其实就是一个加法器.
    加法器只能做加法运算.

    原码
        一个整数的原码符号位用0或1表示, 0表示正, 1表示负, 数值部分就是该整数的绝对值的二进制表示
    
    反码
        正数的反码和原码相同, 负数的反码是把原码中除符号位以外的各位取反, 即0变1, 1变0

    补码
        正数的补码与其原码相同, 负数的补码等于其反码加1, 即最低位加1, 进位不改变符号位
    
    通过补码运算, 可以把减法变为加法, 而乘法可以变成加法, 除法可以变成减法.
    因此, 使用一个加法器就可以完成加, 减, 乘, 除运算.


--------------------------------------------------------------

C语言中, 可以单独操控变量中的位.

在使用中, 通常向硬件设备发送一两个字节来控制这些设备, 其中每个位bit都有特定的含义.
在文件中, 操作系统信息经常被存储, 通过使用特定位表明特定项.
在压缩加密等应用中, 许多压缩和加密操作都是直接处理单独的位.

C语言在提供高级语言便利的同时, 还能在为汇编语言所保留的级别上工作, 这使C语言称为编写设备驱动程序和嵌入式代码的首选语言.

C有两个操控位的工具.
    第一个工具是一套共6个作用于位的按位运算符.
    第二个工具是字段field数据形式, 用于访问int中的位.