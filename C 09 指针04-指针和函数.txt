使用指针指向函数
    函数是C的一种派生类型, 可以理解为具有某种类型的变量, 那么就可以使用指针变量记录其地址

    函数名代表函数的地址, 可以把函数的地址作为参数传递给其他函数, 然后这些函数就可以使用被指向的函数.
    而通常函数指针都用作另一个函数的参数, 告诉该函数要使用哪一个函数.


什么是函数指针
    指向int类型变量的指针, 该指针就存储着这个int类型变量存储在内存位置的指针.
    同样, 函数也有地址, 因为函数的机器语言实现由载入内存的代码组成. 指向函数的指针中存储着函数代码的起始处的地址.

    其次, 声明一个数据指针时, 必须声明指针所指向的数据类型. 声明一个函数指针时, 必须声明指针指向的函数类型.
    为了指明函数类型, 要指明函数签名, 即函数的返回类型和形参类型.


声明函数指针与使用函数指针
    如果把特定函数的地址赋给一个名为func_pt的函数指针, 可以通过下面的两种方式调用函数

        # include "math.h"
        ...
        double (*func_pt)(double);   // 一个返回类型为double, 接受一个double形参的函数指针
        double num;
        func_pt = cos;   // 为函数指针赋值, 即将函数地址赋给函数指针
        num = (*func_pt)(3.14);   // 取指针指向的函数, 并调用, 相当于调用sin(3.14);
        num = func_pt(3.14);   // 将函数名认做指针, 直接调用指针就相当于直接调用函数, 相当于调用sin(3.14);

    声明函数指针
        double (*func_pt) (double); 第一个圆括号把*和func_pt括起来, 表明func_pt是一个指向函数的指针. 第二个圆括号表明该函数的形参列表.
        最后函数返回一个double类型值.

        要声明一个指向特定类型函数的指针, 可以先声明一个该类型的函数, 然后把函数名替换成(* 指针名)形式的表达式. 然后该指针就成为指向该类型函数的指针.

    函数指针赋值
        func_pt = cos; 声明了函数指针后, 可以把类型匹配的函数地址赋值给他. 因为函数名可以用于表示函数的地址, 所以直接赋值即可
    
    调用函数指针
        方式一, 函数指针指向函数, 可以使用*解引用获得指向地址上的函数, 如(* func_pt), 然后在调用
        (* func_pt)(data);

        反式二, 函数名代表函数的地址, 即函数名也是一个指针, 那么指针和函数名可以互换使用, 直接调用函数指针即可
        func_pt(data);

        由于历史原因, 这两种调用方式都保留了下来.


使用typedef
    可以使用typedef来定义一个函数指针类型, 即函数类型
    如
        typedef void (*pfun)(char*);

        作为形式参数
        void function(char*, pfun f);

        声明一个函数指针
        pfun fpt;

        声明一个函数指针数组
        pfun array[2] = {fpt1, fpt2};


--------------------------------------------------------------

在stdlib.h 中声明了二分查找函数bsearch()和快速排序函数qsort(), 这两者都接受一个函数指针作为参数用来指明以何种规则进行比较

    void* bsearch (const void* key, const void* base,
                size_t nitems, size_t size,
                int (*compar)(const void*,const void*));

    key -- 指向要查找的元素的指针, 类型转换为 void*
    base -- 指向进行查找的数组的第一个对象的指针, 类型转换为 void*
    nitems -- base 所指向的数组中元素的个数
    size -- 数组中每个元素的大小, 以字节为单位
    compar -- 用来比较两个元素的函数

对nitems对象的数组执行二分查找, base指向进行查找的数组, key指向要查找的元素, size指定数组中每个元素的大小.
数组的内容应根据compar函数指针所对应的比较函数升序排序.
如果查找成功, 该函数返回一个指向数组中匹配元素的指针, 否则返回空指针.


void qsort (void* base, size_t nitems, size_t size,
            int (*compar)(const void*,const void*));

    base -- 指向要排序的数组的第一个元素的指针
    nitems -- 由 base 指向的数组中元素的个数
    size -- 数组中每个元素的大小, 以字节为单位
    compar -- 用来比较两个元素的函数

对数组进行排序
