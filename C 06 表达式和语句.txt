C的基本程序步骤由语句组成, 而大多数语句都由表达式构成.


表达式 expression
    表达式由运算符和运算对象(运算对象是运算符操作的对象)组成

    运算对象可以使常量, 变量或二者的组合. 一些表达式由子表达式(subexpression)组成, 子表达式即较小的表达式.

    每个表达式都有一个值


语句 statement
    语句是C程序的基本构建块. 一条语句相当于一条完整的计算机指令. 在C中, 大部分语句都以分号结尾.

    如:
        number = 2
    这是一个表达式(可能使较大表达式的一部分)

        number = 2;
    这是一个语句

    最简单的语句是空语句
    如:
        ;   // 空语句

    C把末尾加上一个分号的表达式都看作是一条语句
    如:
        8;
        2 + 3;
    以上都是语句

    根据C标准, 声明不是表达式语句. 也就是说, 如果删除声明后面的分号, 剩下的部分不是一个表达式, 也没有值
    int port   /* 不是表达式, 没有值 */
    赋值表达式语句在程序中很常用, 其为变量分配一个值.

    在C语言中, 赋值和函数调用都是表达式


复合语句 compound statement
    复合语句是用花括号括起来的一条或多条语句, 复合语句也称为块 block


--------------------------------------------------------------

C语言的术语

副作用 side effect
    副作用是对数据对象或文件的修改.

    如:
        sum = a + b;
    其主要目的是对表达式求值. C会对表达式求出a与b的和, 副作用是将求得值用以修改sum的值


序列点 sequence point
    序列点是程序执行的点, 在该点上, 所有副作用都在进入下一步之前发生.
    在C语言中, 语句中的一个分号标记了一个序列点.
    在一个语句中, 各种操作符对运算对象的改变必须在程序执行下一条语句之前完成.

    在debug程序的时候, 使用的单步操作就是在执行一行一行的执行对应行的序列点.
