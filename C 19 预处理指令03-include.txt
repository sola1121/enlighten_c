1. 文件包含
    当预处理器发现#include 指令时, 会查看后面的文件名并把文件的内容包含到当前文件中, 即替换源文件中的#include 指令.
    这相当于把被包含文件的全部内容输入到源文件#include 指令所在位置.

    指令结构
        # include "文件名"
        # include <文件名>

    在UNIX系统中, 使用尖括号<>告诉预处理器在标准系统目录中查找该文件. 
    使用双引号""告诉预处理器首先在当前目录中, 或文件名指定的其他目录, 查找该文件, 如果未找到再查找标准系统目录
    如
        # include <stdio.h>   // 查找标准系统目录
        # include "comment.h"   // 查找当前目录
        # include "/usr/lib/python3.8/Python.h"   // 查找/usr/lib/python3.8/目录
    
    当使用集成开发环境IDE时, 也有标准路径或系统头文件的路径. 对于搜索的目录, 其行为根据其定义的不同而不同.
    ANSI C不为文件提供统一的目录模型, 因为不同的计算机所用的系统不同.
    但是尖括号和双引号的规则是确定的.

    1) 文件内容与结构
        C语言习惯用.h后缀表示头文件, 这些文件包含需要放在程序顶部的信息.
        注意, 这些内容是编译器可执行代码时所需的信息, 而不是可执行代码.
        可执行代码通常放在源代码文件中, 而不是在头文件中
        如
            头文件 head.h, // 其中存放#define 指令, 结构声明, typedef, 函数原型
            源文件 source.c // 首先#include "head.h", 然后对其中宏, 结构体, 自定义类型进行使用, 使用或实现对应函数原型
            主文件 main.c, // 首先#include "head.h", 然后使用其中已定义的宏, 结构体, 自定义类型, 函数
            注意, 在编译时要记住链接
            gcc main.c source.c -o main.exe

    2) 使用头文件
        浏览任何一个标准头文件都可以了解头文件的基本信息. 头文件中常包含如下内容
        明示常量, 如stdio.h中定义的EOF, NULL, BUFSIZE
        宏函数, 如getchar()常用getc(stdin)定义
        函数声明, 如ctype.h中包含的各种函数原型
        结构模板定义, 如标准I/O函数使用FILE结构
        类型定义, 如标准I/O函数利用typedef将FILE结构定义为一种类型
        
        使用头文件声明外部变量供其他文件共享.
        如
            int status = 0;   // 具有文件作用域, 在源代码文件
        可以在与源代码文件相关联的头文件中进行引用式声明
            extern int status;   // 在头文件中
        上面这行代码将会出现在包含了该头文件的文件中, 这样使用该系列函数的文件都能使用这个变量.
        虽然源代码文件中包含了该头文件后也包含了该声明, 但是只要声明的类型一致, 在一个文件中同时使用定义式声明和引用式声明没问题.

        使用头文件声明具有文件作用域, 内部链接, const限定符的变量或数组
        const防止值被意外修改, static意味着每个包含该头文件的文件都获得一份副本.
        因此不需要在一个文件中进行定义式声明, 在其他文件中进行引用式声明.
