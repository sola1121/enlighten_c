关键字和保留标识符
    void
    const , volatile
    signed , unsigned
    char , int , short , long , float , double , _Bool , _Complex, _Imaginary
    struct , union , enum
    typedef
    sizeof
    auto , static, register, extern
    if , else , switch, case, default
    do , while, for, goto
    break , continue
    return , _Noreturn
    inline
    restrict
    _Alignof , _Alignas
    _Generic
    _Static_assert
    _Thread_local


--------------------------------------------------------------

简单的C程序示例

    # include <stdio.h>   /* 预处理时, 将头文件stdio.h中的内容粘贴到这个位置 */

    int main(void){   // 开始函数main()

        int num = 1;   // 声明并初始化变量

        printf("%d\n", num);   // 打印数字
        printf("hello, world.\n");   // 打印内容

        getchar();   // 获得一个输入后结束

        return 0;
    }

可以看作
    函数头
    int main(void)
        函数体
            声明
            语句
            ...


一个C源代码, 通常由 预处理命令, main()函数, 其他函数(如果有), 各种语句组成.

C语言中的6种语句
    标号语句
    复合语句
    表达式语句
    选择语句
    迭代语句
    跳转语句

构成语句的成分
    关键字
    标识符
    运算符
    数据


C语言的注释
    多行注释 /* 这里写注释 */
    单行注释 // 这里写注释


main函数
    int main(); 使程序的启动函数. 这是由C99, C11标准指定的启动方式. 
    圆括号表明这是一个函数, 一般函数通过圆括号运算符进行调用. 如: func(); 属于表达式语句.
    int 说明其会return 一个int类型的数据.
    在括号中, 还可以接收参数, 最简单就是 int main (void); , 表示接受一个空参数.
    还有 int main(int args, char * argvs[]); , 表明接受args个argvs数组, 且该数组使字符串数组.


花括号
    花括号{}, 标记函数体的开始和结束, 在一个花括号中的内容属于同一个语句块.


变量 variable
    在运行期间可能会改变或被赋值


变量的声明 declaration
    声明是C语言最重要的特性之一. 其会完成两件事情.
    int num = 1;
    一, 让编译器分配一个int型大小的内存, 保存字面常量1(初始化)
    二, 将这块内存命名为num, 这就称为了变量.
    num 是一个标识符(变量名) identifier

    C89 标准中, 变量的声明必须放在所有执行语句/语句块的最前面, 而C99即以后标准中可以随时定义. 
    要看编译器所遵循的标准, 如果可以的话编译时使用参数-std=c11来指定.
    在使用变量之前一定要先声明他.

    赋值操作属于表达式语句.


变量与作用域
    声明变量就是向内存申请一个存储空间, 类型就是指明要申请多大的空间.

    全局变量与局部变量
        全局变量 - 定义在代码块"{}"之外的变量
        局部变量 - 定义在代码块"{}"之内的变量
        局部变量只能在所声明的代码块中使用, 而全局变量可以在其声明后任意地方使用.

    局部变量与全局变量名建议不要相同, 当全局变量和局部变量的变量名相同的时候, 所在代码块的局部变量优先.

    作用域
        局部变量所在的作用域就是其所声明在的代码块中.
        全局变量所在的作用域就是其所在的整个工程中.

    生命周期
        局部变量的生命周期是进入作用域声明周期开始, 出作用域声明周期结束.
        全局变量的生命周期是整个程序的生命周期.

    extern关键字
        在同一工程中, 不同文件之中的全局变量, 可以使用extern进行引入声明.
            如: 在工程有有一个全局变量int num; 在其他工程文件中可以使用extern int num; 引入.


常量 constant
    在程序使用之前已经预先设定好了, 在整个程序的运行过程中没有变化
    字面常量 - 直接写出的, 可用于向变量赋值.
        如: 
            "字面常量";
            32;
    const修饰的常变量 - const 让一个变量具有常属性, 让变量成为了常变量, 不能修改.
        如: 
            const int num = 32;   // 常变量, 不能修改
    # define 定义的标识符常量(也叫明示常量) - 宏, 不属于C语言, 在预处理时将会替换对应标识符为指定内容
        如: 
            # define num 32
    枚举常量 - 从0开始1递增将为块中变量依次赋值
        如:
            enum bool {false, true};   // 枚举bool类型常量, false为0, true为1


只是单个值的变量有时也称为标量变量(scalar variable).
    如
        int num = 3;


变量的命名
    对于标识符(变量名), 编译器一般只识别前63位字符, 对于外部标识符, 只允许31位字符.
    标识符可以使用小写字母, 大写字母, 数字, 下划线_, 来命名, 而且名称的第一个字符必须是字母或下划线.


内存中每块内存都标明了一个地址, 通过一个映射表寻址找到并使用他.


转义序列 escape sequence
    反斜杠\ 表示一个转义序列
    表示以该字符表示另一个意思
        如:
            \?   用以解决三字母词问题
            \n   用以换行
            \\   让斜杠以斜杠形式输出
            \ddd ddd表1~3个八进制数字, 须在ASCII范围八进制0~377内, 八进制数字不能大于7   
                \141  八进制0141上对应的字符 a
            \xdd dd表示2个16进制数字, 须在ASCII范围十六进制0~ff内, 十六进制数字不能大于f
                \x61 十六进制x61上对应的字符 a


return 语句
    return 语句是一种跳转语句.
    在main()中可以省略, 程序结束返回0.
    但在其他具有返回值的函数中, 一定得写, 又不是golang.
    对于UNIX/Linux系统, main()中的return返回值表示程序是否出错.


分号
    分号表示一段语句
        如:
            int a; a =
            3
            ;
        两个语句.


函数原型 prototype
    告诉编译器在程序中要使用该函数. 一般写在main()函数的前面. 这也叫做函数声明 function declaration


调试程序
    程序的错误叫做bug, 找出并修正错误的过程叫做debug


驱动程序 driver
    被设计用于测试函数的程序有时被称为驱动程序(driver), 该驱动程序调用一个函数. 
    如果函数成功通过了测试, 就可以安装在一个更重要的程序中使用.


编译过程中错误和警告的区别
    错误导致无法编译, 警告允许编译


代码的 换行写法
    可以在不同部分之间输入空白, 将一条语句写成多行
    如: 
        printf("打印格式 %d\n",
                num);
    使用反斜杠 \, 转义在实际代码中的换行
    如:
        printf("打印格\
        式 %d\n", num);
    使用字符串连接, 即两个双引号扩起来的字符串之间用空白隔开, C编译器会把多个连续的字符串看作是一个字符串
    如:
        printf("打印"
               "格式 %d\n", num);
