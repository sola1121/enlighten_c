转义字符
    在C语言中, 一个字符除了可以用它的实体(也就是真正的字符)表示, 还可以用编码值表示.
    这种使用编码值来间接地表示字符的方式称为转义字符(Escape Character).

    转义字符以 \ 或者 \x 开头
        \  开头表示后跟八进制形式的编码值
        \x 开头表示后跟十六进制形式的编码值
    注意:
        对于转义字符来说, 只能使用八进制或者十六进制
    
    如
        char a = 'a';   // 本体形式
        char b = '1';   // 本体形式
        char a = '\61';  // 八进制形式, 字符1
        char b = '\141';  // 八进制形式, 字符a
        char c = '\x31';  // 十六进制形式, 字符1
        char d = '\x61';  // 十六进制形式, 字符a

    转义字符既可以用于单个字符, 也可以用于字符串, 并且一个字符串中可以同时使用八进制形式和十六进制形式.
    如
        char *str1 = "\x31\x32\x33\x61\x62\x63";  // 字符串"123abc"
        char *str2 = "\61\62\63\141\142\143";  // 字符串"123abc"
        char *str3 = "The string is: \61\62\63\x61\x62\x63"  // 混用八进制和十六进制形式

    转义字符的初衷是用于 ASCII 编码, 所以它的取值范围有限, 取值为0~127(十进制) 
        八进制形式的转义字符最多后跟三个数字, 也即\ddd, 最大取值是\177
        十六进制形式的转义字符最多后跟两个数字, 也即\xdd, 最大取值是\x7f
    超出范围的转义字符的行为是未定义的, 有的编译器会将编码值直接输出, 有的编译器会报错

    对于 ASCII 编码, 0~31(十进制)范围内的字符为控制字符, 它们都是看不见的, 不能在显示器上显示, 甚至无法从键盘输入, 只能用转义字符的形式来表示.
    不过, 直接使用 ASCII 码记忆不方便, 也不容易理解.
    所以, 针对常用的控制字符, C语言又定义了简写方式, 完整的列表如下:
    转义字符         意义                      	ASCII码值(十进制)
        \a 	     响铃(BEL) 	                        007
        \b 	     退格(BS), 将当前位置移到前一列 	    008
        \f 	     换页(FF), 将当前位置移到下页开头 	    012
        \n 	     换行(LF), 将当前位置移到下一行开头 	010
        \r 	     回车(CR), 将当前位置移到本行开头 	    013
        \t 	     水平制表(HT)  	                     009
        \v 	     垂直制表(VT) 	                     011
        \' 	     单引号                              039
        \" 	     双引号 	                         034
        \\ 	     反斜杠                              092    