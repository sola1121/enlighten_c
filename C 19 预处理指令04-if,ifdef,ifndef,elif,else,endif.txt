1. 条件编译 conditional compilation
    # if, # ifdef, # ifndef, # elif, # else, # endif

    注意, 使用比较新的编译器和ANSI标准支持缩进格式, 如果使用旧的编译器, 必须左对齐所有指令或至少左对齐#号.
    
    1) # ifdef, # else, # endif 指令
        指令结构
            # ifdef 宏名
            ...
            # else
            ...
            # endif
        ifdef所表达意思为, if define 如果定义了宏.
        如果在ifdef后面的标识符已在预处理器中定义, 则执行其后#else或#endif指令之前的所有指令并编译所有C代码, 先出现哪个指令就执行到哪里.
        如果在ifdef后面的标识符未在预处理器中定义, 则执行#else和#endif指令之间的所有代码.

        # ifdef, # else 很像C的if else. 两者的区别是预处理器不识别用于标记块的花括号{}, 因此他使用#else(如果需要)和#endif(必须存在)来标记指令块.
        这些指令结构可以嵌套, 也可以用这些指令标记C语句块.

        如, 用于程序试调
            
            # define DEBUG
            int main(){
                ...
                # ifdef DEBUG
                    puts("试调模式运行.");
                # endif
                ...
            }
    
    2) # ifndef 指令
        # ifndef和# ifdef指令用法相同, 可以配合# else指令使用, 也需要# endif标记指令块结束.
        # ifndef逻辑和# ifdef指令逻辑相反.
        指令结构
            # ifndef 宏名
            ...
            # else
            ...
            # endif
        ifndef所表达意思为, if no define 如果没有定义宏
        # ifndef指令判断后面的标识符是否是未定义的, 常用于定义之前未定义的常量.

        如
            # ifndef SIZE
                # define SIZE 32
            # endif
        
        通常, 包含多个头文件时, 其中的文件可能包含了相同宏定义. # ifndef指令可以防止相同的宏被重复定义.
        在首次定义一个宏的头文件中用# ifndef指令激活定义, 随后在其他头文件中的定义都被忽略.

        (1) 在不同头文件中防止相同宏被重复定义
            当源文件中与其之后使用# include指令包含的头文件中有相同的宏的时候, 该头文件中若使用# ifndef配合定义了这个同名宏.
            那么这个根据先后, 这个头文件中的该宏将不会被定义, 这避免了冲突.

        (2) 防止多次包含一个文件
            使用# ifndef指令判断一个头文件中的宏是否已经被定义了
            如果已定义, 说明已经使用# include指令包含了该头文件, 若未定义, 配合# ifndef则再使用# include指令包含该头文件.

            在包含许多文件的源文件中, 用此方式可以避免不同文件中宏名冲突, 当然, 这可能在之后使用还是会有问题.
            还有就是防止某个文件被重复包含, 比如被包含文件包含的文件在源文件中又被包含.
        
            1. 如何确保待测试的标识符没有在别处定义
                通常, 实现的供应商用文件名作为标识符, 使用大写字母, 用下划线字符代替文件名中的点字符, 用下划线字符做前缀或后缀.
                如, 在studio.h头文件中
                    # ifndef _STDIO_H
                    # define _STDIO_H
                    ...
                    # endif
                用户也可以这样做, 但是在自己的源代码中, 应该不要这样写, 避免与标准头文件中的宏发生冲突.

    3) # if, # elif 指令
        # if 指令很像C语言中的if表达式.
        # if后面跟整型常量表达式, 如果表达式为非零, 则表达式为真.
        可以在指令中使用C语言的关系运算符和逻辑运算符.
        只能用于宏之间的关系与逻辑运算, C中变量不能.
        指令结构
            # if 宏表达式
            ...
            # elif 宏表达式
            ...
            # else
            ...
            # endif

        对于大部分编辑器, 还支持defined预处理运算符, 可以配合# if 指令使用
        # if defined 宏名
        等同于
        # ifdef 宏名
        这种方式有点就是可以和# elif指令一起使用.
