二级指针
    指向指针的指针
        int ** ppt;
    *指针运算符, 从右向左运算, 先声明ppt为一个指针, 然后再执行第二个*指针运算符, 表示ppt指针指向一个int*, 即int指针.
    则二级指针ppt, 是一个指向指针的指针, 其值为一个int指针变量的地址.

二维指针
    记录数组的数组
        int matrix[3][4];
    其对应的数组指针
        int (* pt)[4];
    圆括号中*指针运算符先进行运算, 然后执行[4]下标运算符, 表示该指针指向一个int [4], 即具有4个int元素的数组.

    在内存中, 不管是一维数组还是多维数组, 都是一块连续的空间, 因此在计算机表达上, 都是一维数组


对比
    ppt是一个二级指针, 它首先是一个指针, 指向一个int*.
    matrix是二维数组名, 它首先是一个指针, 指向一个含有4个元素的int数组.

    由此可见, matrix和ppt的类型并不相同, 如果想将a赋值给p, 需要强制类型转换
    如
        ppt = (int**) matrix;


为什么不能将二维数组名传递给二级指针
    如果将matrix赋值给ppt, ppt = (int**)matrix; 既然ppt是二级指针, 那么当然可以这么用: **ppt; 这样会出什么问题呢?

        首先看一下ppt的值, ppt指向matrix[0][0], 即ppt的值为matrix[0][0]的地址

        在看一下*ppt的值, ppt所指向的类型是int*, 占4字节, 解引用操作过程将会从ppt指向的地址开始, 取连续4个字节的内容. 得到的正式matrix[0][0]的值.

        再看一下**ppt的值, 编译器在这是会引发段错误, 即试图使用不存在的内存块, 当然报错了, 因为**ppt意思是访问了matrix[0][0]的值对应的地址空间, 而这个空间是没有权限访问的.

