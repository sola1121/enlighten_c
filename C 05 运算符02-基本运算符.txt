优先级2, 左←右, 单目运算符
    !  : 逻辑非
    ++ : 自增
    -- : 自减
    +  : 正号
    -  : 负号
    (类型) : 类型强制转换
    sizeof : 长度运算符

优先级3, 左→右, 双目运算符
    *  : 乘
    /  : 除
    %  : 取余

优先级4, 左→右, 双目运算符
    +  : 加
    -  : 减

优先级6, 左→右, 双目运算符
    <  : 小于
    <= : 小于等于
    >  : 大于
    >= : 大于等于

优先级7, 左→右, 双目运算符
    == : 相等于
    != : 不相等

优先级11, 左→右, 双目运算符
    && : 逻辑与

优先级12, 左→右, 双目运算符
    || : 逻辑或

优先级13, 左←右, 三目运算符
    ?: : 条件运算符

优先级14, 左←右, 双目运算符
    =  : 赋值
    *= : 乘后赋值
    /= : 除后赋值
    %= : 取余后赋值
    += : 加后赋值
    -= : 减后赋值


优先级15, 左→右
    ,  : 顺序求值运算符


----------------------------算术运算符-----------------------------

递增运算符 ++
    自增, increment operator
    将其运算对象递增1
    出现在其作用的变量前面 - 前缀模式, 在语句序列点前, 对其右侧的值加1 
    出现在其作用的变量后面 - 后缀模式, 在语句序列点后, 对其左侧的值加1

    如: 
        int count = 0;
        while (++ count < 10)   // 会先将count加1, 在与10相比较
            printf("%d\n", count);

        输出 1~9

        int count = 0;
        while (count ++ < 10)   // 会先将count与10相比较, 在将count加1
            printf("%d\n", count);

        输出 1~10


递减运算符 --
    自减, decrement operator
    将其运算对象递减1
    出现在其作用的变量前面 - 前缀模式, 在语句序列点前, 对其右侧的值减1
    出现在其作用的变量后面 - 后缀模式, 在语句序列点后, 对其左侧的值减1

    如:
        int count = 10;
        while (-- count > 0)   // 会先将count减1, 在与0相比较
            printf("%d\n", count);

        输出 9~1


        int count = 10;
        while (count -- > 0)   // 会先将count与0相比较, 在将count减1
            printf("%d\n", count);
        
        输出 9~0


正号 +
    作为一元运算符, 改变其右侧值的符号为正数
    默认的可以省略


负号 -
    作为一元运算符, 改变其右侧值的符号为负数


乘法 *
    将其左侧的值乘以右侧的值


除法 /
    将其左侧的值除以右侧的值, 如果两数都是整数, 计算结果将被截断
    
    浮点数除法的结果是浮点数

    整数除法的结果是整数, 也就是说, 整数相除, 是不会得出小数部分的.
    在C语言中, 整数除法结果的小数部分会被丢弃, 这一过程称为截断(truncation)

    混合整数和浮点数的除法, 计算结果是浮点数.
    计算机不能真正用浮点数与整数作除法, 编译器会把两个运算对象转换成相同的类型, 一般是升级为容量更高的类型.


求模运算符 %
    modulus operator
    只能应用于整数运算
    当其左侧的值除以右侧的值时, 取其余数


加法 +
    将其左侧的值与右侧的值相加


减法 -
    将其左侧的值减去右侧的值


赋值运算符 = 
    将其右侧的值赋给左侧的变量
    可以进行多重赋值
    如:
        int num1 = num2 = num3 = 120;

    *=  乘后赋值
    /= 除后赋值
    %= 取余后赋值
    += 加后赋值
    -= 减后赋值


-----------------------------关系运算符----------------------------

<  小于
<= 小于或等于
>= 大于或等于
>  大于

== 等于
!= 不等于

关系运算符从左向右运算, 将左侧的值和右侧的值进行比较
关系运算符返回真或假, 化成数值, 运算结果只为 1 或 0
如:
    num1 != num2 == num3; 与 (num1 != num2) == num3; 运算结果相同
    先将 num1 和 num2 进行比较, 得出真或假, 对应数值1或0, 再将值1或值0与num3进行比较


-----------------------------逻辑运算符----------------------------

!  逻辑非, 优先级2, 左←右, 单目运算符
&& 逻辑与, 优先级11, 左→右, 双目运算符
|| 逻辑或, 优先级12, 左→右, 双目运算符

练习&&时间 == 完美 👍

注意
    && 优先级比 || 优先级高, 两者都比关系运算符优先级低
    如可以这样写
        a>b && b>c || b>d 就相当于 ((a>b && b>c) || (b>d))

在C中, 除了两个运算符共享一个运算对象的情况外, C通常不保证先对复杂表达式中哪部分求值
如:
    num = (3+5) * (6-2);   // 可能先对(3+5)求值, 也可能先对(6-2)求值
但是对于逻辑运算符例外, C保证逻辑表达式的求值顺序是从左到右.
&& 和 || 运算符都是序列点, 所以程序在一个运算对象执行到下一个运算对象之前, 所有副作用都会生效.
而且, C保证一旦发现某个元素让整个表达式无效 即为假, 便立刻停止求值.
利用以上特性, 可以这样写
    while ( (ch=getchar())!='' && ch!='\n' )   // 读取字符直至遇到第一个空格或换行符
第一个子表达式把读取的值赋给ch, 后面的子表达式会用到ch的值

    if (number != 0 && 128/number==2)
如果number的值是0, 那么第一个表达式为假, 且不再对关系式求值. 这避免了把0作为除数.

    while ( x++ < 10 && x + y < 20 )
因为&&是一个序列点, 保证了在对&&右侧的表达式求值之前, x已经递增了


常见错误
    使用&&用于测试范围
    if (num>=10 && num<=20)
    但是如果像下面这样写
    if (10<=num<=20)
    这样写的问题是代码有语义错误, 所以编译器不会捕获这样的问题, 有些编译器可能会给出警告
    其实际语义相当于
    if ( (10<=num) <= 20 )
    将会用第一个关系运算表达式计算出的真假值, 即0或1代入之后的关系运算


备选拼写标准库 iso646.h
    C99标准新增了可代替逻辑运算符的拼写, 如: not代替!, and代替&&, or代替||, eq代替==等


------------------------------其他------------------------------


强制类型转换运算符 (类型名)
    强制类型转换运算符将其右侧的值转换成与那括号中指定的类型.
    如:
        (float) 9;   // 把整型9转换成浮点数 9.0


sizeof 运算符
    获得其右侧运算对象的大小(以字节为单位)
    返回类型为size_t, 是一个无符号整数类型, 定义为已有的某个无符号类型, 是个别名
    当运算对象是类型名时, 不能省略圆括号
    如:
        sizeof(int);
    当运算对象是变量名时, 可以省略圆括号
    如:
        sizeof(number);
        sizeof number;


条件运算符 ? :
    C提供条件表达式conditional expression
    从右到左, 唯一的三目运算符

    expression1 ? expression2 : expression3
    
    如果expression1为真(非零), 整个条件表达式的值是expression2, 否则是expression3


逗号运算符 ,
    逗号运算符把两个表达式连接成一个表达式, 并保证最左边的表达式最先求值

    整个逗号表达式的值是右侧项的值

    如:
        x = (y = 3, (z = ++y + 2) + 5);
        先将3赋值给y, 递增y为4, 然后把4加2之和6赋值给z, 接着加上5, 最后把结果11赋值给x.

        num = 589, 325;
        num = 589在逗号左侧, 优先赋值, 右侧表达式为325, 整个逗号运算符的运算值就为325, 但没有什么实质操作

        num = (589, 325);
        589在逗号左侧, 325在逗号右侧, 括号运算完成后, 逗号运算符得出右侧325赋值给num

    注意
        逗号还可以用作分隔符, 常用在函数, for等
