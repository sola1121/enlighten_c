什么是类型?
    类型特指两类信息: 属性和操作
例如
    int 类型, 其属性代表其是一个整数值, 符合数学上的整数定义, 可以共享整数的属性. 那么允许对int 类型进行的操作又有改变值的符号,两个int类型相加,相减,相乘,相除,求模等.


1. 抽象数据类型 Abstract Data Type (ADT)
    抽象数据类型是计算机科学中具有类似行为的特定类别的数据结构的数学模型, 或者说具有类似语义的一种或多种程序设计语言的数据类型.
    抽象数据类型是描述数据结构的一种理论工具, 其目的是使人们能够独立于程序的实现细节来理解数据结构的特性.
    抽象数据类型的定义取决于它的一组逻辑特性, 而与计算机内部如何表示无关.

1.1 数据结构类型
    1) 容器 Collection

        容器是指实例为其他类的对象的集合的类, 数据结构, 或者抽象数据类型. 换言之, 它们以一种遵循特定访问规则的系统的方法来存储对象. 容器的大小取决于其包含的对象(或元素)的数目. 
        潜在的不同容器类型的实现可能在空间和时间复杂度上有所差别, 这使得在给定应用场景中选择合适的某种实现具有灵活性.

        (1) 容器可以三种方式看待
            访问, 储存, 遍历

        (2) 容器类应当实现如下的方法
            1.创建一个新的空容器(即构造函数)
            2.向容器中插入对象
            3.从容器中删除对象
            4.删除容器中的所有对象(即清空)
            5.访问容器中的对象
            6.获取容器中对象的数目(即尺寸)

        (3) 实现例子
            C++: (SC++L) 或 the obsolete 标准模板库 (STL) 中各种数据结构
            Golang: 内置类型 slice, 标准库container/list
            Python: 内置对象 list, dict, tuple和set, 标准库collections
            PL/SQL: 集合 DataSet

    1.1) 集合 
        
        集合在计算机科学中是一组可变数量的数据项(也可能是0个)的组合, 这些数据项可能共享某些特征, 需要以某种操作方式一起进行操作. 
        一般来讲, 这些数据项的类型是相同的, 或基类相同(若使用的语言支持继承).
        列表(或数组)通常不被认为是集合, 因为其大小固定, 但事实上它常常在实现中作为某些形式的集合使用.

        (1) 集合的种类
            (1.1) 关联数组
                1.属性特征
                    关联数组又称映射, 字典等, 为 键 - 值 配对. 通过唯一键可以引用值
                    通常使用散列表实现高效率的关联数组.
                2.常见操作
                    修改值, 删除配对, 通过键获取配对键值.
            
            (1.2) 列表
                1.属性特征
                    在列表中, 数据项的顺序是确定的, 也可以存在多个相同的数据项. 
                    通常的队列, 或称FIFO即是一个列表, 该列表只能在一端添加项目, 而在另一端删除项目. 
                    而栈, 或LIFO则只能在同一端添加或删除项目. 不管是队列还是栈, 集合中项目的顺序都应当是一定的, 因此这两种情况只是列表的特例.
                    列表的具体形式包括数组, 链表等.
                2.常见操作
                    查找项目并找到其位置(若存在), 将项目从列表中删除, 在特定位置插入项目等. 
                    其它列表支持的操作包括排序, 再一次说明了其中顺序的重要性.
            
            (1.3) 集
                1.属性特征
                    数据项是无序的, 也不允许存在相同数据项.
                2.常见操作
                    添加, 删除, 查找项目.
                    一些语言内建对集的支持, 而在其它语言中, 可以利用散列表实现集.
            
            (1.4) 多重集
                1.属性特征
                    多重集的行为类似于集，其中数据项是无序的. 但在多重集中, 可以存在相同的数据项. 
                    多重集可以通过排序转换成列表.
                2.常见操作
                    添加项, 删除项, 查询相同项在多重集中出现的次数. 

            (1.5) 树
                1.属性特征
                    二叉树是树的一种类型. 在树中, "根"节点与一定数量的数据项以 亲-子 关系联系起来, 而其子数据项也与另外的数据项以同样的方式联系. 
                    除了根节点的每个项都有且只有一个父节点, 并可能有一些子节点. 
                2.常见操作
                    遍历, 插入.
                    用于排序操作的树通常称为堆.
                    通常使用树来保存存在包含 亲-子 关系的数据, 例如菜单, 目录及其中文件等.

            (1.6) 图
                1.属性特征
                    在图中, 每个数据项都可以与一个或多个其它数据项联系起来, 其中每个节点都是平等的, 类似于无根节点, 无亲-子关系的树.
                2.常见操作
                    遍历, 查找等. 
                    图常常用于对实际问题进行建模, 并解决这些问题.
                    在生成树协议中, 建立一张代表网络结构的图(或称网格), 从而了解应当断开哪些链路以避免数据回圈.

            抽象概念及其实现
                集合, 以及集合的各种分类都只是抽象概念. 由于名字相同或相似, 集合及其在各种语言中的实现常常会造成文字上的混淆.
                集合, 列表, 集, 树等名字究竟是数据结构, 抽象数据类型抑或类, 只能通过具体分析来确定. 
                其中, 集合则是计算问题的解决方案中抽象程度最高的概念. 从这个方面来看, 若过于关注其实现, 则可能会对理解集合的数学概念产生反作用.

1.1 抽象类型
    	
    1) 关联数组 Associative Array
        关联数组, 又称映射(Map), 字典(Dictionary), 是一个抽象的数据结构, 它包含着类似于 (键, 值) 的有序对. 
        一个关联数组中的有序对可以重复, 也可以不重复.
        字典问题是设计一种能够具备关联数组特性的数据结构. 解决字典问题的常用方法, 是利用散列表, 但有些情况下, 也可以直接使用二叉查找树或其他结构.

        (1) 常见操作
            1.增, 向关联数组添加配对
            2.删, 从关联数组内删除配对
            3.改, 修改关联数组内的配对
            4.查, 根据已知的键寻找配对

        (2) 实现例子
            C++: STL 标准模板库 map 无序且不可重复
            Golang 内置类型 map 无序且键值不可重复, 第三方库orderedmap 有序且键值不可重复
            Python 内置对象 dict() 无序且键值不可重复, 标准库collections.OrderedDict 有序且键值不可重复

    2) 多重关联数组 Multimap
        多重关连数组, 是一种抽象数据结构, 它存储著(键，值)的有序对, 和map不同之处在于, 多重关连数组的有序对可以重复. 通常, 多重关连数组是利用在map中使用串列或集合当作值的字段.

        (1) 常见操作: 
            1.增, 向关系数组添加配对
            2.删, 从关系数组内删除配对
            3.改, 修改关系数组内的配对
            4.查, 根据已知的键查找配对

        (2) 实现例子
            C++: SGI标准库 利用散列表的hash_multimap, STL标准模板库 multimap

    3) 列表 list

        列表或序列(sequence), 是一种抽象数据类型.
        一种有限且有序的值的集合, 其中每个值可以出现多次.
        列表是容器的一个基本例子, 因为它们包含其他值. 在列表中的每个值(value), 称为项目(item), 条目(entry)或元素(element); 如果相同的值出现多次, 每一次出现都认为是分立的一个项目.
        列表的一个实例是在计算机中用来表现出数学上有限序列的概念; 列表的无限类似是流.
        列表和数组区别在列表只允许顺序访问, 而数组允许随机访问.
        在数据结构中, 也使用这个名称, 表示实现出列表的数据结构, 尤指链表(linked list).
        所谓静态列表结构只允许对值的审查和枚举. 一个可变对象或动态列表在其生存周期内允许条目被插入, 替换或删除.
        许多编程语言支持列表数据类型, 针对列表和列表运算有特定的语法和逻辑. 通常可以通过写入序列中的元素来创建列表. 元素用逗号, 分号或空格分开, 位于一对括号(如圆括号 '()', 方括号, '[]', 花括号 '{}', 以及尖括号 '<>')的内部 .

        (1) 属性特征
            1.列表大小. 它表明列表中有多少元素.
            2.列表相等. 在数学里, 有时列表相等定义为-两个列表是相等的当且仅当它们是相同的对象. 在现代编程语言中, 列表相等一般定义为相应条目结构上相等, 要是列表具有类型, 那么与列表类型也有关联.
            3.列表具有的类型. 这表明列表中的条目必须有与列表声明的类型符合或兼容. 当列表由数组实现的时候常常会具有类型.
            4.列表中每个元素有一个标号. 首元素一般标号为0(或其他一些预定义的整数). 后面的元素的标号比前一个大1. 尾元素的标号为<首标号> + <size> − 1.
            5.可以检索特定标号(index)的元素.
            6.可以按照标号增加的顺序遍历列.
            7.可以改变特定标号的元素的值, 同时不影响其他元素.
            8.可以向特定标号插入一个元素. 后面的元素标号增加1.
            9.可以在特定标号删除一个元素. 后面的元素标号减少1.

        (2) 常见操作
            1.生成, 一个生成空列表的构造函数
            2.是否空, 用于测试列表是否为空的运算
            3.确定头, 确定列表头元素的运算
            4.前增, 向列表前端加入元素的运算
            5.后增, 向列表末端加入元素的运算
            6.引用, 用于引用除首项外所有部分的列表(这被称为列表的"尾部")
            7.销毁, 销毁列表析构函数

    4) 堆栈 stack
        堆栈又称为栈或堆叠, 是计算机科学中的一种抽象数据类型, 只允许在有序的线性数据集合的一端(称为堆栈顶端, top)进行加入数据(push)和移除数据(pop)的运算. 
        常与另一种有序的线性数据集合队列相提并论.
        堆栈常用一维数组或链表来实现.

        (1) 属性特征
            后进先出(LIFO, Last In First Out) 或者说先进后出. 后来的先
            除头尾节点之外, 每个元素有一个前驱, 一个后继.

        (2) 常用操作
            推入(压栈, push) 和 弹出(弹栈, pop)

            推入 是指将数据放入堆栈顶端, 堆栈顶端移到新放入的数据.
            弹出 是指将堆栈顶端数据移除, 堆栈顶端移到移除后的下一笔数据.

    5) 队列 queue
        (1) 属性特征
            队列是计算机科学中的一大类抽象数据类型, 共同特征是位先进先出(FIFO, First-In-First-Out)的线性表, 或者说后进后出. 先来的先
            在具体应用中通常用链表或者数组来实现. 

        (2) 常用操作
            队列只允许在后端(称为rear)进行插入操作, 在前端(称为front)进行删除操作.
            队列的操作方式和堆栈类似, 唯一的区别在于队列只允许新数据在后端进行添加.

        5.1) 双端队列 double-ended queue
            双端队列(deque, 全名double-ended queue)是一种具有队列和栈性质的抽象数据类型. 
            双端队列中的元素可以从两端弹出, 插入和删除操作限定在队列的两邊进行.

        5.2) 优先队列
            优先队列是计算机科学中的一类抽象数据类型. 
            优先队列中的每个元素都有各自的优先级, 优先级最高的元素最先得到服务, 优先级相同的元素按照其在优先队列中的顺序得到服务. 
            优先队列往往用堆来实现.

            (1) 常见操作
                插入带优先级的元素(insert_with_priority)
                取出具有最高优先级的元素(pull_highest_priority_element)
                查看最高优先级的元素(peek): O(1) 时间复杂度

                * 其它可实现操作
                    检查优先级高的一批元素
                    清空优先队列
                    批插入一批元素
                    合并多个优先队列
                    调整一个元素的优先级

            (2) 实现例子
                C++: 标准模板STL 最大优先队列 支持随机访问数据容器的优先队列-二叉最大堆.
                Python: 标准库heapq 二叉最小堆 标注库queue 将heapq模块包装实现的PriorityQueue类.
                Go: 标准库container/heap 一个可以在任何兼容数据结构上构建的最小堆.

    6) 集 set
        (1) 特征属性
            这里的集, 指并查集(Disjoint-set data structure, 译为不交集数据结构). 在计算机科学中, 是一种数据结构, 用于处理一些不交集(Disjoint sets, 一系列没有重复元素的集合)的合并及查询问题.
            由于支持查询和合并这两种操作，并查集在英文中也被称为联合-查找数据结构(Union-find data structure)或者合并-查找集合(Merge-find set).
        
        (2) 常见操作
            1.查询, 查询某个元素属于哪个集合, 通常是返回集合内的一个"代表元素". 这个操作是为了判断两个元素是否在同一个集合之中.
            2.合并, 将两个集合合并为一个.
            3.添加, 添加一个新集合, 其中有一个新元素. 添加操作不如查询和合并操作重要, 常常被忽略.
       
1.2 链表 Linked list
    链表是一种常见的基础数据结构, 是一种线性表, 但是并不会按线性的顺序存储数据, 而是在每一个节点里存到下一个节点的指针(Pointer).
    链表有很多种不同的类型: 单向链表, 双向链表, 循环链表.
    由于不必须按顺序存储, 链表在插入的时候可以达到O(1)的复杂度, 比另一种线性表(队列)顺序表快得多, 但是查找一个节点或者访问特定编号的节点则需要O(n)的时间, 而顺序表相应的时间复杂度分别是O(logn)和O(1).
    优点-可以克服数组链表需要预先知道数据大小的缺点, 链表结构可以充分利用计算机内存空间, 实现灵活的内存动态管理.
    缺点-失去了数组随机读取的优点, 同时链表由于增加了结点的指针域, 空间开销比较大.

    (1) 属性特征
        在计算机科学中, 链表作为一种基础的数据结构可以用来生成其它类型的数据结构. 
        链表通常由一连串节点组成, 每个节点包含任意的实例数据(data fields)和一个或两个用来指向上一个/或下一个节点(node)的位置的链接("links").
        链表最明显的好处就是, 常规数组排列关联项目的方式可能不同于这些数据项目在记忆体或磁盘上顺序, 数据的存取往往要在不同的排列顺序中转换.
        而链表是一种自我指示数据类型, 因为它包含指向另一个相同类型的数据的指针(链接).
    (2) 常见操作    
        链表允许插入和移除表上任意位置上的节点, 但是不允许随机存取.
        遍历查询, 但是链表的遍历往往消耗较大.

    (3) 分类
        1.单向链表
            它包含两个域, 一个信息域和一个指针域. 这个链接指向列表中的下一个节点, 而最后一个节点则指向一个空值.
        2.双向链表
            每个节点有两个连接, 一个指向前一个节点, (当此"连接"为第一个"连接"时, 指向空值或者空列表); 而另一个指向下一个节点, (当此"连接"为最后一个"连接"时, 指向空值或者空列表).
        3.循环链表
            首节点和末节点被连接在一起. 这种方式在单向和双向链表中皆可实现.

1.3) 树 Tree

    树在计算机科学中是一种抽象数据类型或是实现这种抽象数据类型的数据结构, 用来模拟具有树状结构性质的数据集合. 
    它是由n(n>0)个有限节点组成一个具有层次关系的集合. 把它叫做"树"是因为它看起来像一棵倒挂的树, 也就是说它是根朝上, 而枝朝下的.
    
    (1) 属性特征
        1.每个节点都只有有限个子节点或无子节点
        2.没有父节点的节点称为根节点
        3.每一个非根节点有且只有一个父节点
        4.除了根节点外，每个子节点可以分为多个不相交的子树
        5.树里面没有环路(cycle)

    (2) 分类
        (2.1) 无序树
            树中任意节点的子节点之间没有顺序关系, 这种树称为无序树, 也称为自由树.
        (2.2) 有序树
            树中任意节点的子节点之间有顺序关系, 这种树称为有序树.

            1. 二叉树
                每个节点最多含有两个子树的树.
                1.1 完全二叉树
                    对于一棵二叉树, 假设其深度为d (d>1). 除了第d层外, 其它各层的节点数目均已达最大值, 且第d层所有节点从左向右连续地紧密排列.
                    1.1.1 满二叉树
                        所有叶节点都在最底层的完全二叉树.
                1.2 平衡二叉树(AVL树)
                    当且仅当任何节点的两棵子树的高度差不大于1的二叉树
                1.3 排序二叉树(二叉查找树(Binary Search Tree)),也称二叉搜索树,有序二叉树
            2. 霍夫曼树
                带权路径最短的二叉树称为哈夫曼树或最优二叉树.
            3. B树
                一种对读写操作进行优化的自平衡的二叉查找树, 能够保持数据有序, 拥有多于两个子树.

1.4) 图

1.5) 其他

    1) 复数 Complex

        (1) 实现例子
            C 语言 标准库 complex.h
            Golang 内置类型 complex128 和 complex64
            Python 内置对象 complex

    2) 数组 Array
        数组数据结构(array data structure), 简称数组(Array), 是由相同类型的元素(element)的集合所组成的数据结构, 分配一块连续的内存来存储. 
        利用元素的索引(index)可以计算出该元素对应的存储地址.

        最简单的数据结构类型是一维数组. 例如: 索引为0到9的32位整数数组, 可作为在存储器地址2000, 2004, 2008, ...2036中, 存储10个变量, 因此索引为i的元素即在存储器中的2000+4×i地址. 数组第一个元素的存储器地址称为第一地址或基础地址.
        二维数组, 对应于数学上的矩阵概念, 可表示为二维矩形格. 

        数组是最早期和最重要的数据结构之一, 很多程序都会用到数组. 它们也用于实现许多其他数据结构, 譬如列表(list)和字符串(string).
        它们有成效地开展了计算机的寻址逻辑, 在大多数现代计算机和许多外部存储设备中, 存储器如同一维数组, 索引就是其地址. 编译器, 处理单元(特别是向量处理器), 经常会针对数组操作进行优化.

        在某些情况下, "向量"一词也可能代表二维数组, 虽然在数学意义上更确切地称呼为元组(tuple), 而不是向量. 但需要注意的是: 计算机科学的某些领域, 如Matlab, 元组是指类似C语言struct类型, 具有固定的往往是不同类型的数据成员的数据结构.
        数组通常用于实现数据库的表格, 特别是查询表; 表格有时也被当作是数组的同义词.

        因为在程序运行时可以计算元素的索引, 数组是很有用的. 此外, 也能以单一迭代语句就处理数组的许多元素. 为此, 数组数据结构的元素必须具有相同的大小, 而且应该使用相同的资料类型表示.

        数组一词通常用于表示数组数据类型, 一种大多数高端编程语言都会内置的资料类型. 数组类型通常由数组结构来实现; 然而在某些语言中, 它们可以由散列表, 链表, 搜索树或其它数据结构来实现.

        在算法的描述中, 数组一词特别着重意义为关系数组或"抽象的数组", 一种理论上的计算机科学模型(抽象数据类型或 ADT), 专注于数组的基本性质上.

    3) 字符串 String
        字符串, 是由零个或多个字符组成的有限序列. 它是编程语言中表示文本的数据类型.
        通常以串的整体作为操作对象. 如: 在串中查找某个子串, 求取一个子串, 在串的某个位置上插入一个子串以及删除一个子串等.
        两个字符串相等的充要条件是-长度相等, 并且各个对应位置上的字符都相等.
        设p, q是两个串, 求q在p中首次出现的位置的运算叫做模式匹配.
        串的两种最基本的存储方式是顺序存储方式和链接存储方式.
