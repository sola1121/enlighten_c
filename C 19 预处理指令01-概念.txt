0. 预处理指令(preprocessing direcitve)

    C标准不仅描述C语言, 还描述如何执行C预处理, C标准库有哪些函数, 以及详述这些函数的工作原理.

    C预处理器在程序执行之前查看程序. 根据程序中的预处理器指令, 预处理器把符号缩写替换成其表示的内容.
    预处理器可以包含程序所需的其他文件, 可以选择让编译器查看哪些代码.
    预处理器并不知道C. 基本上他的工作是把一些文本替换成另外一些文本.

    在预处理之前, 编译器必须对该程序进行一些翻译处理.
        首先, 编译器把源代码中出现的字符映射到源字符集. 该过程处理多字节字符和三字节字符.
        第二, 编译器定位每个反斜杠\后面跟着换行符的实例, 并删除他们. 让预处理时表达式的长度是一个逻辑行. 这里的换行符指书写源代码时使用Enter输入的换行.
            puts("hello, wo\
            rld.");
            将会被处理为
            puts("hello, world.");
            换为一个逻辑行logical line
        第三, 编译器把文本环分成预处理记号序列, 空白序列, 注释序列. 需要注意, 编译器将用一个空格字符替换每一条注释.
            int/* 注释内容 */num;
            将会被处理为
            int num;

    在预处理阶段, 预处理器把程序中的注释全部删除, 并用一个空格代替, 并开始对预处理指令进行处理
        如将#include 指令指定的头文件的内容复制并替换在该指令位置处
        对#define 指令, 将该指令定义的宏替换为指定的文本, 替换完成后删除指令所在行

    经过处理后的待编译代码不包含任何预处理指令, 再由编译器生成可执行的目标代码.

    1) 预处理指令的常用功能
        1. 宏定义
        2. 文件包含
        3. 条件编译

    2) 格式样式
        为了与C语言相区别, 以# 作为一行的开始, 预处理器通过查找# 来定位预处理指令的位置
        允许#前面有空格, 制表符. 允许#和指令的其余部分之间有空格.
        宏必须定义为一条逻辑行, 但是可以用\把一条逻辑行分隔成多条物理行.

    3) 位置
        指令可以出现在源文件的任何地方, 其定义从指令出现的地方到该文件末尾有效.


0. 各种指令
    # define 指令定义宏, 可以用于指定明示常量, 宏函数
    # undef 指令取消之前定义的宏
    # if, # ifdef, # ifndef, # else, # elif, # endif 指令用于指定什么情况下编译哪些代码
    # line 指令用于重置行和文件信息
    # error 指令用于给出错误消息
    # pragma 指令用于向编译器