文件 file
    文件通常是在磁盘或者固态硬盘上的一段已命名的存储区.

    C把文件看作是一系列连续的字节, 每个字节都能被单独读取.
    对应于Unix/Linux系统将一切视为文件的概念.
    由于其他环境中可能无法对应这个模型, C提供了文本模式和二进制模式.


文件缓冲区
    计算机系统中, CPU与I/O设备将速度通常都不是匹配的. 为了缓和CPU与I/O设备之间速度不匹配的矛盾, 系统在读写文件过程中开辟了文件缓冲区.
    文件缓冲区是在内存中预留的一段空间, 用来暂时存放读写期间的文件数据. 使用文件缓冲区可以减少系统读写硬盘的次数.
    ANSI C标准采用"缓冲文件系统", 系统会为每个打开的文件在内存中开辟一个文件缓冲区.

    当向文件写入数据, 数据从程序数据区(程序变量)先输出到写缓冲区(输出缓冲区), 再从缓冲区写到文件.
    写缓冲区装满后(或执行fclose()函数关闭文件操作时), 系统才把写缓冲区的数据送往磁盘文件. 也可以在程序中用函数fflush()把缓冲区中的现有内容写到磁盘文件.

    当从文件读入数据, 系统把数据先从文件送到读缓冲区(输入缓冲区), 然后再从读缓冲区送到程序的相关变量中.
    文件缓冲区由fopen()函数建立, 又fclose()函数撤销.
    缓冲区大小可以使用setvbuf()函数自定义.


文本模式和二进制模式

    文本内容, 二进制内容
        所有文件的内容都以二进制形式(0或1)存储.
        当文件最初使用二进制编码的字符, 例如ASCII, utf-8, Unicode, 表示文本, 该文件就是文本文件, 其中包含文本内容
        当文件中的二进制代表机器语言或数值数据, 例如音频编码, 图片, 该文件就是二进制文件, 其中包含二进制内容

    文本文件格式, 二进制文件格式
        Unix/Linux系统使用同一种文件格式处理文本文件和二进制文件的内容. 
        毕竟C是作为开发Unix的工具而创建的, C和Unix在文本中都使用\n换行符表示换行.
        Unix目录中有一个统计文件大小的计数, 程序使用该计数确定是否读到文件尾.

        其他操作系统有其不同的方法专门用于保存文本.
        如基于MS-DOS系统中文件用\r\n组合表示新的一行, 用嵌入Ctrl-Z字符表示文件结尾. 使实际文件用添加空字符的方法使其总大小是256的倍数.

    文件的文本模式, 文件的二进制模式
        为了规范文本文件的处理, C提供两种访问文件的途径, 文本模式和二进制模式.

        在文本模式中, 程序所见的内容和文件的实际内容不同. 程序以文本模式读取文件时, 把本地环境表示的行末尾或文件结尾映射为C模式
        如
            将\r\n表示的换行转换成\n
            其他环境中编写的文本模式程序也会做类似的转换

        在二进制模式中, 程序可以访问文件的每个字节.
        如
            在以\r\n表示换行的文件中, 程序会看到\r\n, 而不会做任何转换

I/O的级别
    I/O的级别, 即处理文件访问的两个级别

    底层I/O(low-level I/O)使用操作系统提供的基本I/O服务.
    标准高级I/O(standard high-level I/O)使用C库的标准包和stdio.h头文件定义.

    因为无法保证所有的操作系统都使用相同的底层I/O模型, C标准只支持标准I/O包.


标准I/O
    与底层I/O相比, 标准I/O可移植, 有许多专门的函数简化了处理不同I/O的问题, 输入和输出都是缓冲的.
